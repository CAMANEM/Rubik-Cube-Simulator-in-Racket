#lang racket

;; Sumatoria a X dado:

(define (Sumatoria X)
  (cond ((zero? X)
        0)
        (else
   (+ X (Sumatoria (- X 1))))))

;; Factorial a X dado:

(define (Factorial X)
  (cond ((equal? X 0) 1)
        (else
         (* X (Factorial (- X 1))))))

;; Fibonacci a X dado:

(define (Fib X)
  (cond ((zero? X) 0)
        ((= X 1) 1)
        (else
         (+ (Fib (- X 1)) (Fib (- X 2))))))

;; eleva un numero x a la potencia n:

(define (Elevar x n)
  (cond ((zero? n) 1)
        (else
         (* x (Elevar x (- n 1))))))


;; Comprueba si un valor se encuentra en la lista:

(define (miembro? valor lista)
  (cond ((null? lista) #f)
        ((equal? valor (car lista)) #t)
        (else
         (miembro? valor (cdr lista)))))

;; Elimina un elemento de una lista:
;; x: numero a eliminar
;; lista: lista de la que se desea eliminar

;;;Se puede mejorar esta funcion

(define (Eliminar_Aux x lista lista_nueva)
  (cond ((null? lista) lista_nueva)
        ((equal? x (car lista)) (Eliminar_Aux x (cdr lista) lista_nueva))
        (else
         (Eliminar_Aux x (cdr lista) (append lista_nueva (list (car lista)) )))))

(define (Eliminar x lista)
  (Eliminar_Aux x lista '()))


;; QuickSort



